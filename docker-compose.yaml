version: '2'

services:
  # RTSP Stream Backend Service
  rtsp-backend:
    image: node:18-alpine
    build: ./backend
    container_name: rtsp-stream-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
    volumes:
      # Synology absolute paths
      - /volume1/docker/rtsp-proxy/backend/server.js:/usr/src/app/server.js:ro
      - /volume1/docker/rtsp-proxy/backend/package.json:/usr/src/app/package.json:ro
      - /volume1/docker/rtsp-proxy/streams:/usr/src/app/streams
      - /volume1/docker/rtsp-proxy/node_modules:/usr/src/app/node_modules
    networks:
      - rtsp-network
    working_dir: /usr/src/app
    command: |
      sh -c "
        # Install FFmpeg if not present
        which ffmpeg || (apk update && apk add --no-cache ffmpeg curl bash)
        
        # Install npm dependencies if needed
        if [ ! -d node_modules ] || [ ! -f node_modules/.bin/nodemon ]; then
          echo 'Installing npm dependencies...'
          npm install --production
        fi
        
        # Start the server
        exec node server.js
      "
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost:8080/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Frontend (Nginx)
  rtsp-frontend:
    image: nginx:alpine
    build: ./frontend
    container_name: rtsp-stream-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    volumes:
      # Synology absolute paths
      - /volume1/docker/rtsp-proxy/frontend:/usr/share/nginx/html:ro
      - /volume1/docker/rtsp-proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - rtsp-network
    depends_on:
      - rtsp-backend
    healthcheck:
      test: ["CMD", "wget", "-q", "-O", "-", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  rtsp-network:
    driver: bridge